# mysql0
# spring.datasource.url=jdbc:mysql://172.17.0.2:3306/db_example
# mysql1
# spring.datasource.url=jdbc:mysql://172.17.0.3:3306/db_example
# spring.datasource.username=root
# spring.datasource.password=password
# spring.datasource.driver-class-name =com.mysql.jdbc.Driver
# spring.jpa.show-sql=true

# We do not want hibernate to create and execute DDL for us
# as we have already created the table in both of our databases
spring.jpa.hibernate.ddl-auto=none
spring.jpa.database=mysql

spring.main.allow-bean-definition-overriding=true

# Apache sharding sphere configurations go here

# We tell sharding sphere the names of our data sources
# Here we have used database names as data source names for better readability
spring.shardingsphere.datasource.names=db0,db1

# We declare datasources for the sharding sphere
# The configuration is separated by naming - notice datasource.db0 and datasource.db1
spring.shardingsphere.datasource.db0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.db0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.db0.url=jdbc:mysql://172.17.0.2:3306/db0?useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.db0.jdbc-url=${spring.shardingsphere.datasource.db0.url}
spring.shardingsphere.datasource.db0.jdbcUrl=${spring.shardingsphere.datasource.db0.url}
spring.shardingsphere.datasource.db0.username=root
spring.shardingsphere.datasource.db0.password=password

spring.shardingsphere.datasource.db1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.db1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.db1.url=jdbc:mysql://172.17.0.3:3306/db1?useUnicode=true&characterEncoding=UTF-8
spring.shardingsphere.datasource.db1.jdbc-url=${spring.shardingsphere.datasource.db1.url}
spring.shardingsphere.datasource.db1.jdbcUrl=${spring.shardingsphere.datasource.db1.url}
spring.shardingsphere.datasource.db1.username=root
spring.shardingsphere.datasource.db1.password=password

# We define the sharding column to be the "id" column of our table
# This is on a database level and it would indicate which database to choose
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=id
# We then define the algorithm expression which would evaluate to either db0 or db1
# indicating whether to put data in db0 or db1
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=db$->{id % 2}

# We define the sharding strategy on a table level
# This would point to actual tables in the databases - db0.user_0 and db1.user_0
spring.shardingsphere.sharding.tables.user.actual-data-nodes=db$->{0..1}.user_$->{0..0}
# Sharding column for tables
spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column=id
# Sharding algorithm expression for tables - A constant as we only have one table that we want to shard across
spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression=user_0
# Key generator strategy - we delegate id generation to sharding sphere
spring.shardingsphere.sharding.tables.user.key-generator.column=id
spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE